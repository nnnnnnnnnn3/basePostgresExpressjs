{"version":3,"sources":["../../../api/server/model-services/UserService.js"],"names":["UserService","database","User","findAll","newUser","console","log","create","id","obj","findOne","where","Number","UserToUpdate","update","theUser","userToDelete","destroy","userdeleted"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;uBAGaC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;qHAMIC,O;;;;;;AAEjBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,OAArB;;uBACaH,mBAASC,IAAT,CAAcK,MAAd,CAAqBH,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;wHAMOI,E,EAAIC,G;;;;;;;;uBAEGR,mBAASC,IAAT,CAAcQ,OAAd,CAAsB;AAC/CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADwC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACIZ,mBAASC,IAAT,CAAcY,MAAd,CAAqBL,GAArB,EAA0B;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAA1B,C;;;kDAECC,G;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;sHAMWD,E;;;;;;;;uBAEIP,mBAASC,IAAT,CAAcQ,OAAd,CAAsB;AAC1CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADmC,iBAAtB,C;;;AAAhBO,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;wHAMaP,E;;;;;;;;uBAEOP,mBAASC,IAAT,CAAcQ,OAAd,CAAsB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtB,C;;;AAArBQ,gBAAAA,Y;;qBAEFA,Y;;;;;;uBACwBf,mBAASC,IAAT,CAAce,OAAd,CAAsB;AAC9CN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADuC,iBAAtB,C;;;AAApBU,gBAAAA,W;kDAGCA,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOElB,W","sourcesContent":["import database from '../models';\n\nclass UserService {\n  static async getAllUsers() {\n    try {\n      return await database.User.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addUser(newUser) {\n    try {\n      console.log(\"USER \", newUser)\n      return await database.User.create(newUser);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateUser(id, obj) {\n    try {\n      const UserToUpdate = await database.User.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (UserToUpdate) {\n        await database.User.update(obj, { where: { id: Number(id) } });\n\n        return obj;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAUser(id) {\n    try {\n      const theUser = await database.User.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteUser(id) {\n    try {\n      const userToDelete = await database.User.findOne({ where: { id: Number(id) } });\n\n      if (userToDelete) {\n        const userdeleted = await database.User.destroy({\n          where: { id: Number(id) }\n        });\n        return userdeleted;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default UserService;"],"file":"UserService.js"}